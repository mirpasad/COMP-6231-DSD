package ServerObjectInterfaceApp;


/**
* ServerObjectInterfaceApp/ServerObjectInterfacePOA.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from ./ServerObjectInterface.idl
* Saturday, 25 February, 2023 9:01:57 AM IST
*/

public abstract class ServerObjectInterfacePOA extends org.omg.PortableServer.Servant
 implements ServerObjectInterfaceApp.ServerObjectInterfaceOperations, org.omg.CORBA.portable.InvokeHandler
{

  // Constructors

  private static java.util.Hashtable _methods = new java.util.Hashtable ();
  static
  {
    _methods.put ("insertMovieSlots", new java.lang.Integer (0));
    _methods.put ("removeMovieSlots", new java.lang.Integer (1));
    _methods.put ("displayAvailability", new java.lang.Integer (2));
    _methods.put ("reserveMovieTickets", new java.lang.Integer (3));
    _methods.put ("obtainBookingSchedule", new java.lang.Integer (4));
    _methods.put ("cancelMovieTickets", new java.lang.Integer (5));
    _methods.put ("swapMovie", new java.lang.Integer (6));
    _methods.put ("shutdown", new java.lang.Integer (7));
  }

  public org.omg.CORBA.portable.OutputStream _invoke (String $method,
                                org.omg.CORBA.portable.InputStream in,
                                org.omg.CORBA.portable.ResponseHandler $rh)
  {
    org.omg.CORBA.portable.OutputStream out = null;
    java.lang.Integer __method = (java.lang.Integer)_methods.get ($method);
    if (__method == null)
      throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);

    switch (__method.intValue ())
    {

  /**
        * Only admin
        */
       case 0:  // ServerObjectInterfaceApp/ServerObjectInterface/insertMovieSlots
       {
         String movieID = in.read_string ();
         String movieName = in.read_string ();
         int bookingCapacity = in.read_long ();
         String $result = null;
         $result = this.insertMovieSlots (movieID, movieName, bookingCapacity);
         out = $rh.createReply();
         out.write_string ($result);
         break;
       }

       case 1:  // ServerObjectInterfaceApp/ServerObjectInterface/removeMovieSlots
       {
         String movieID = in.read_string ();
         String movieName = in.read_string ();
         String $result = null;
         $result = this.removeMovieSlots (movieID, movieName);
         out = $rh.createReply();
         out.write_string ($result);
         break;
       }

       case 2:  // ServerObjectInterfaceApp/ServerObjectInterface/displayAvailability
       {
         String movieName = in.read_string ();
         String $result = null;
         $result = this.displayAvailability (movieName);
         out = $rh.createReply();
         out.write_string ($result);
         break;
       }


  /**
        * Both admin and Customer
        */
       case 3:  // ServerObjectInterfaceApp/ServerObjectInterface/reserveMovieTickets
       {
         String customerID = in.read_string ();
         String movieID = in.read_string ();
         String movieName = in.read_string ();
         int numberOfTickets = in.read_long ();
         String $result = null;
         $result = this.reserveMovieTickets (customerID, movieID, movieName, numberOfTickets);
         out = $rh.createReply();
         out.write_string ($result);
         break;
       }

       case 4:  // ServerObjectInterfaceApp/ServerObjectInterface/obtainBookingSchedule
       {
         String customerID = in.read_string ();
         String $result = null;
         $result = this.obtainBookingSchedule (customerID);
         out = $rh.createReply();
         out.write_string ($result);
         break;
       }

       case 5:  // ServerObjectInterfaceApp/ServerObjectInterface/cancelMovieTickets
       {
         String customerID = in.read_string ();
         String movieID = in.read_string ();
         String movieName = in.read_string ();
         String $result = null;
         $result = this.cancelMovieTickets (customerID, movieID, movieName);
         out = $rh.createReply();
         out.write_string ($result);
         break;
       }

       case 6:  // ServerObjectInterfaceApp/ServerObjectInterface/swapMovie
       {
         String customerID = in.read_string ();
         String newMovieID = in.read_string ();
         String newMovieName = in.read_string ();
         String oldMovieID = in.read_string ();
         String oldMovieName = in.read_string ();
         String $result = null;
         $result = this.swapMovie (customerID, newMovieID, newMovieName, oldMovieID, oldMovieName);
         out = $rh.createReply();
         out.write_string ($result);
         break;
       }

       case 7:  // ServerObjectInterfaceApp/ServerObjectInterface/shutdown
       {
         this.shutdown ();
         out = $rh.createReply();
         break;
       }

       default:
         throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);
    }

    return out;
  } // _invoke

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:ServerObjectInterfaceApp/ServerObjectInterface:1.0"};

  public String[] _all_interfaces (org.omg.PortableServer.POA poa, byte[] objectId)
  {
    return (String[])__ids.clone ();
  }

  public ServerObjectInterface _this() 
  {
    return ServerObjectInterfaceHelper.narrow(
    super._this_object());
  }

  public ServerObjectInterface _this(org.omg.CORBA.ORB orb) 
  {
    return ServerObjectInterfaceHelper.narrow(
    super._this_object(orb));
  }


} // class ServerObjectInterfacePOA
